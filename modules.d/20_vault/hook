#!/bin/bash

sealedError='{"errors":["Vault is sealed"]}'
badTokenError='{"errors":["permission denied"]}'
validTokenPermissionDeniedError='{"errors":["1 error occurred:\n\t* permission denied\n\n"]}'
blankResponseError='{"errors":[]}'
curlErrorRegex='^curl:.*$'

function evalCmdline {

  for entry in $(cat /proc/cmdline | sed -e 's/VAULTHOSTOVERRIDE/VAULT_ADDR/g' -e 's/VAULTTOKENOVERRIDE/VAULT_TOKEN/g')
  do
    param=${entry/=*/}
    value=${entry/*=/}
  
    if [[ ! "${entry}" =~ '=' ]] || [[ "${param}" =~ '.' ]] || [[ "${value}" =~ ',' ]]
    then
      continue # Ignore args with a literal dot (module params) or without a param=value format
    fi
  
    case "$(tr '[:upper:]' '[:lower:]' <<< ${param})" in
  
      vault_addr)
        export VAULT_ADDR="${value}"
        setFromCmdline+=(VAULT_ADDR)
        lockdownCmdline
        ;;
  
      vault_token)
        export VAULT_TOKEN="${value}"
        setFromCmdline+=(VAULT_TOKEN)
        lockdownCmdline
        ;;
  
      role_id)
        export role_id="${value}"
        setFromCmdline+=(role_id)
        lockdownCmdline
        ;;
  
      secret_id)
        export secret_id="${value}"
        setFromCmdline+=(secret_id)
        lockdownCmdline
        ;;
    esac
  done

  [[ -n "${setFromCmdline[@]}" ]] && echo -e "\n\t\tSet from kernel cmdline: ${setFromCmdline[@]}"
}

function kernelArgumentSpiel {
  echo -e "\t\tConfig can be overridden with kernel arguments VAULT_ADDR=, VAULT_TOKEN=, role_id=, secret_id="
  echo -e "\t\t(non-case sensitive)"
}

function curlErrorHandler {

  if [ ${curlReturnCode} -eq 0 ] && jq -e .request_id <<< ${response} 2>&1 >/dev/null
  then
    echo -e "${successText}"
    return ${curlReturnCode}
  elif [ "${response}" == "${blankResponseError}" ]
  then
    echo -e "\t\tVault returned a blank response for ${lockedDataset}."
    echo -e "\t\tYou have access to read this secret path but it may not exist."
    return 1
  elif [ "${response}" == "${validTokenPermissionDeniedError}" ]
  then
    echo -e "\t\tVault claims our token doesn't have permission to read the secret for ${lockedDataset}."
    echo -e "\t\tPlease consult your policies."
    return 1
  elif [ "${response}" == "${sealedError}" ]
  then
    echo -e "\t\tThe vault address provided claims to be sealed."
    echo -e "\t\tCannot continue until its unsealed."
    return 1
  elif [ "${response}" == "${badTokenError}" ]
  then
    echo -e "\t\t\tVault server reachable but trying to lookup own token resulted in a permission error."
    echo -e "\t\t\tToken may be invalid. If valid, policies may be too tight."
    return 1
  elif [[ "$(head -n1 <<< ${response})" =~ ${curlErrorRegex} ]] # If we're dealing with a cURL error
  then
    echo -e "\t\tcURL threw an error trying to ${goalText} against ${VAULT_ADDR}"
    echo
    sed -E -e 's/^/\t\t\t/g' <<< "${response}" # Share cURL's output
  else # If we don't know what we're looking at
    echo -e "\t\tSomething else went wrong trying to ${goalText} against ${VAULT_ADDR} [cURL exit code ${curlReturnCode}]"
    echo ${response}
  fi


}

function curler {
  # Further URL preparation and multiple attempts in case a cluster member is sealed.
  # '--retry' and Co don't establish new connections - preventing RRDNS from rerolling.
  
  unset goalText successText METHOD postdata
  while [ $# -gt 0 ]
  do
    case "$(tr '[:upper:]' '[:lower:]'<<<$1)" in
      -goalText)
        goalText="$2"
        shift
        ;;
      -successText)
        successText="$2"
        shift
        ;;
      -method)
        METHOD="-X${2}"
        shift
        ;;
      -postdata)
        postdata=("-d" "$2")
        shift
        ;;
    esac
    shift
  done

  if [ -n "${VAULT_TOKEN}" ]
  then
    TokenHeader="X-Vault-Token: ${VAULT_TOKEN}"
  else
    unset TokenHeader
  fi

  # Prepend the https protocol if omitted from VAULT_ADDR
  [[ ! "${URL}" =~ ^[a-z]+:// ]] && URL="https://${URL}"

  retryAttempts=10 attemptNumber=0

  while [[ ${attemptNumber} -lt ${retryAttempts} ]]
  do
    (((attemptNumber++)))
    response="$(curl -q -sS ${METHOD} -H "${TokenHeader}" "${URL}" "${postdata[@]}" 2>&1)" ; curlReturnCode=$?
    if [ "${response}" == "${sealedError}" ]
    then
      [ ${attemptNumber} -eq 1 ] && echo -e "\t\tHit sealed vault... retrying" >&2
    else
      break
    fi
  done

  curlErrorHandler "${goalText}" "${successText}" # Check for problems before continuing
  return ${?}
}

function checkVaultTokenValid {
    # Do a self-lookup API call before waiting any time
  URL="${VAULT_ADDR}/v1/auth/token/lookup-self"
  curler -method GET -goalText "validate the token" -successText "\t\tAccessing vault [${VAULT_ADDR}] successful, Token valid."
  return ${?}
}

function attemptVaultRead {
  URL="${VAULT_ADDR}/v1/${vaultKvEngineName}/${vaultRootSearchPath}/${lockedDataset}"
  curler -goalText "read the kv secret" -successText "\t\t\tSuccessfully read secret data"
  return ${?}
}

function getTokenFromApprole {
  URL="${VAULT_ADDR}/v1/auth/approle/login"
  curler -goalText "get token from approle" -successText "\t\t\tSuccessfully got token from approle" -postdata "{\"role_id\": \"${role_id}\", \"secret_id\":\"${secret_id}\"}"

  if VAULT_TOKEN=$(jq -e -r .auth.client_token <<< "${response}")
  then
    echo "Got a vault token successfully..."
  else
    echo "Failed to get a vault token, check approle"
    exit 1
  fi
}

function lockdownCmdline {
    desiredPermissions=440
    currentPermissions=$(stat -c '%a' /proc/cmdline)
    if [ ${desiredPermissions} -ne ${currentPermissions} ]
    then
      chmod 440 /proc/cmdline # Best effort protection from regular processes
      echo -e "\t\t/proc/cmdline permissions switched to 440 to help protect sensitive data."
    fi
}

function prepare {
  if [ -n "${VAULT_ADDR}" ] && [ -n "${VAULT_TOKEN}" ]
  then
    echo -e "\n\t\tTesting Addr+Token in config..."
    if checkVaultTokenValid # Check config's variables
    then
      echo -e "\t\tzfsUnlocker config token is valid. Continuing..."
      return
    else
      unset VAULT_TOKEN
    fi
  fi

  evalCmdline # Set variables from /proc/cmdline

  if [ -n "${VAULT_ADDR}" ] && [ -n "${VAULT_TOKEN}" ]
  then
    echo -e "\n\t\tTesting cmdline token..."
    if checkVaultTokenValid
    then
      return
    else
      unset VAULT_TOKEN
    fi
  fi

    # Check for an approle role_id and secret_id in kernel arguments to try.
  if [ -n "${role_id}" ] && [ -n "${secret_id}" ]
  then
    echo -e "\n\t\tTesting cmdline approle..."
    getTokenFromApprole
    if [ -n "${VAULT_TOKEN}" ] && checkVaultTokenValid
      then
        echo -e "\t\tValid token set from Approle"
        lockdownCmdline
        return
      else
        echo -e "\t\tUnable to set token from Approle"
    fi
  fi


  kernelArgumentSpiel
}

function hook {

  if [ -f /etc/zfsUnlocker/zfsUnlocker.conf ]
  then
    . /etc/zfsUnlocker/zfsUnlocker.conf
  else
    echo "\t\t/etc/zfsUnlocker/zfsUnlocker.conf missing, skipping module."
    return 1
  fi


  prepare # Enumerate options and cmdline looking for a valid token.
  
  if [ ${vaultPromptForMissingInfo} -eq 1 ] && [ -z "${VAULT_ADDR}" -o -z "${VAULT_TOKEN}" ]
  then
    echo -e "\t\tUnable to determine Vault details and prompting is enabled."
    [ -z "${VAULT_ADDR}" ] && read -sp "Vault Host:"  VAULT_ADDR
    [ -z "${VAULT_ADDR}" ] && read -sp "Vault Token:" VAULT_TOKEN
  fi

  if [ -z "${VAULT_ADDR}" ] || [ -z "${VAULT_TOKEN}"  ]
  then
    echo -e "\t\tNot enough info to run vault hook"
    [ -z "${VAULT_ADDR}" ]  && echo -e "\t\tVault host missing"
    [ -z "${VAULT_TOKEN}" ] && echo -e "\t\tVault token missing"
    return 1
  fi

    # Try unlocking all datasets with an 'unavailable' keystatus, but root first.

  if [ -n "${testDataset}" ]
  then 
    lockedDatasets="${testDataset}"
  else
    lockedDatasets="${dataset} $(zfs get -H -o name,value keystatus 2>/dev/null | grep unavailable | grep -v '@' | cut -f1)"
  fi

  for lockedDataset in ${lockedDatasets}
  do

      # If unlocked and not a test run, skip
    grep -qsP '\tavailable' <<< $(zfs get -H -o name,value keystatus ${lockedDataset} 2>/dev/null) && [ -z "${testDataset}" ] && continue

    echo -e "\t\tAttempting unlock of: ${lockedDataset}"
    attemptVaultRead 
    vaultPassphraseResult="$(jq -e -r '.data.data.passphrase' <<< ${response})" ; jqParseExitCode=$?
    [ ${jqParseExitCode} -gt 0 ] && { echo -e "\t\tFailed to read a passphrase from the result" ; exit 1 ;}

    echo -e "\t\t\tPassphrase found for ${testDataset}"

    if result=$(yes "${vaultPassphraseResult}" | zfs load-key ${lockedDataset} 2>&1)
    then
        echo -e "\t\t\tSuccessfully unlocked ${lockedDataset}"
    else
        sed 's/^/\t\t\t/g' <<<${result}
        fi

      # Quietly try the passphrase on other datasets too
    yes "${vaultPassphraseResult}" | zfs load-key -a >/dev/null 2>&1
  done
}


function test { # For someone to test the hook with before rebooting
  echo "This is a test function to try reading a vault dataset secret before rebooting."

}

function cleanup {
 : 
}

if [ "${1}" == 'test' ]
then
  echo "Entering test mode."

  if [ "${2}" ]
  then
    testDataset=${2}
    hook
  else
    echo "Please provide a dataset name as an argument."
  fi
else
  ${1}
fi
