#!/bin/bash

function hook {
  if [ -f /etc/zfsUnlocker/zfsUnlocker.conf ]
  then
    . /etc/zfsUnlocker/zfsUnlocker.conf
  else
    echo "/etc/zfsUnlocker/zfsUnlocker.conf missing, skipping vault module."
    return 1
  fi

    # Try unlocking root dataset first. Then try unlocking other datasets with an unavailable keystatus while we're at it.

  for lockedDataset in $dataset $(zfs get -H -o name,value keystatus | grep unavailable | grep -v '@' | cut -f1)
  do
    if ! zfs get -H -o name,value keystatus ${lockedDataset} | grep unavailable >/dev/null 2>&1 ; then continue ; fi # If not still locked, skip
    URL="https://${vaultHost}/v1/${vaultKvEngineName}/${vaultRootSearchPath}/${lockedDataset}"

    result=$(curl -sq -H "X-Vault-Token: $vaultToken" -X GET "$URL")

    if [ "$result" == '{"errors":["permission denied"]}' ]
    then
      echo -e "\t\tCouldn't find a Vault secret for ${dataset} with URL: $URL"
    elif [ "$result" == '{"errors":[]}' ]
    then
      echo -e "\t\tVault permission error, is the token valid?"
    else
      vaultResult="$(echo $result | jq '.data.data.passphrase')"
      echo -e "\t\tTrying to unlock $lockedDataset"
      eval yes "$vaultResult" | zfs load-key -a # Try findings
    fi
  done
}

function cleanup {
 : 
}

$1
