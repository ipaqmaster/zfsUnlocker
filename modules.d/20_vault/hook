#!/bin/bash

function kernelArgumentSpiel {
  echo -e "\t\tKernel arguments: VAULTSERVEROVERRIDE=xxx and VAULTTOKENOVERRIDE=xxx"
  echo -e "\t\tCan be used to override vault vars without initramfs regeneration."
}

function checkVaultTokenValid {
    # Do a self-lookup API call before waiting any time
  URL="https://${vaultHost}/v1/auth/token/lookup-self"
  resultJson=$(curl -sq -H "X-Vault-Token: $vaultToken" -X GET "$URL")    ; curlReturnCodeJson=$?

  if [ "$resultJson" == '{"errors":["Vault is sealed"]}' ]
  then
    echo -e "\t\tThe remote vault server claims to be sealed."
    echo -e "\t\tCannot continue until its unsealed."
    return 1
  elif [ "$resultJson" == '{"errors":["permission denied"]}' ]
  then
    echo -e "\t\tVault server reachable but permission denied trying to lookup own token."
    echo -e "\t\tToken may be invalid or applied policy may be too tight."
    kernelArgumentSpiel
    return 1
  elif [ $curlReturnCodeJson -eq 6 ]
  then
    echo -e "\t\tcURL failed to resolve the remote host. Networking may be down."
    return $curlReturnCodeJson
  elif [ $curlReturnCodeJson -gt 0 ]
  then
    echo -e "\t\tSomething else went wrong with our cURL attempt to verify token validity [cURL exit code $curlReturnCodeJson]"
  else
    echo -e "\t\tAccessing vault [$vaultHost] successful, TOKEN IS VALID."
  fi

  return $curlReturnCodeJson
}

function attemptVaultRead {
    URL="https://${vaultHost}/v1/${vaultKvEngineName}/${vaultRootSearchPath}/${lockedDataset}"
    result=$(curl --fail -sq -H "X-Vault-Token: $vaultToken" -X GET "$URL")
    curlReturnCodeJson=$?

    if [ $curlReturnCodeJson -eq 22 ]
    then
        # Try again to catch the error
      responseCode=$(curl --fail -H "X-Vault-Token: $vaultToken" -X GET "$URL" 2>&1 | grep -oP '[0-9]{3}$')
      if [ "$responseCode" -eq 403 ]
      then
        echo -e "\t\tVault returned a 403 for ${lockedDataset}. Token may not have access to the secret"
      elif [ "$responseCode" -eq 404 ]
      then
        echo -e "\t\tVault returned a 404 for ${lockedDataset}. The secret may not exist?"
      else
      echo -e "\t\tVault returned an error trying to read your unlock passphrase. Does the kv secret exist?"
      fi
      return 1
    elif [ "$result" == '{"errors":["permission denied"]}' ]
    then
      echo -e "\t\tPermission Denied trying to read vault secret for ${dataset} with URL: $URL"
    else
      vaultPassphraseResult="$(echo $result | jq '.data.data.passphrase')"
    fi
}

function hook {

  if [ -f /etc/zfsUnlocker/zfsUnlocker.conf ]
  then
    . /etc/zfsUnlocker/zfsUnlocker.conf
  else
    echo "\t\t/etc/zfsUnlocker/zfsUnlocker.conf missing, skipping module."
    return 1
  fi

    # Check for kernel argument overrides and use them if available.
  if [ -n "$VAULTHOSTOVERRIDE" ] && [ -n "$VAULTTOKENOVERRIDE" ]
  then
    echo -e "\t\tCustom vault token and server provided in kernel arguments, using those..."
    echo -e ""
     vaultHost=$VAULTHOSTOVERRIDE
    vaultToken=$VAULTTOKENOVERRIDE
  elif [ -z "$vaultHost" ] || [ -z "$vaultToken" ]
  then
    echo -e "\t\tvaultHost and/or vaultToken variables left empty in zfsUnlocker.conf."
    echo -e "\t\tCannot possibly run hook."
    kernelArgumentSpiel
    return 1
  fi

    checkVaultTokenValid|| exit 1

    # Try unlocking all datasets with an 'unavailable' keystatus, but root first.

  if [ -n "$testDataset" ]
  then 
    lockedDatasets="$testDataset"
  else
    lockedDatasets="$dataset $(zfs get -H -o name,value keystatus 2>/dev/null | grep unavailable | grep -v '@' | cut -f1)"
  fi

  for lockedDataset in $lockedDatasets
  do
    if ! zfs get -H -o name,value keystatus ${lockedDataset} 2>/dev/null | grep unavailable >/dev/null 2>&1 && [ ! -n "$testDataset" ] ; then continue ; fi # If not still locked, skip
    [ -n "$testDataset" ] && echo -e "\t\tAttempting unlock of: $lockedDataset"

    attemptVaultRead || exit 1

    if [ -n "$testDataset" ]
    then
      echo -e "\t\t$(wc -m <<<"$vaultPassphraseResult") char length passphrase successfully found for $testDataset"
    else
      eval yes "$vaultPassphraseResult" | zfs load-key -a # Try findings
    fi
  done
}


function test { # For someone to test the hook with before rebooting
  echo "This is a test function to try reading a vault dataset secret before rebooting."

}

function cleanup {
 : 
}

if [ "$1" == 'test' ]
then
  echo "Entering test mode."

  if [ "$2" ]
  then
    testDataset=$2 hook
  else
    echo "Please provide a dataset name as an argument."
  fi
else
  $1
fi
