#!/bin/bash

function hook {
  . /etc/zfsUnlocker/zfsUnlocker.conf

  if [ ${askPassphraseOnSerial} -eq 1 ]
  then
    echo -e "\t\tListening to serial interfaces for a passphrase..."

    # Find valid serial interfaces
    serialInterfaces=($(awk -F':' '/uart:[0-9]/{ print "/dev/ttyS"$1 }' /proc/tty/driver/serial))

    # Include any ttyUSB* or ttyACM* serial interfaces too.
    serialInterfaces+=($(find /dev \( -name 'ttyUSB*' -or -name 'ttyACM*' \) -printf '%f '))

    # If the kernel argument console= has been used try to exclude that serial interface from this hook as it will already be prompting for a passphrase directly.
    for arg in $(</proc/cmdline)
    do
      case "${arg}" in
        console=*)
          #consoleSerialInterface=$(cut -d= -f2 <<< "${arg}")
          consoleSerialInterface="${arg/*=/}"
          # Rebuild the array of serial interfaces attempting to remove the match.
          serialInterfacesNew=()
          for serialInterface in ${serialInterfaces[*]}
          do
            [[ ! "$serialInterface" == *"${consoleSerialInterface}"* ]] && serialInterfacesNew+=(${serialInterface})
          done
          serialInterfaces=(${serialInterfacesNew[*]})
          ;;
      esac
    done

    if [ -n "${serialInterfaces}" ]
    then
      echo -e "\t\tRelevant serial interfaces: ${serialInterfaces[*]}"

      # Print information to each serial interface and begin listening for passphrases on them.
      for serialInterface in ${serialInterfaces[*]}
      do
        echo -e  "[zfsUnlocker]" >${serialInterface}
        echo -e  "\t\tListening on all ttyS* interfaces for an unlock passphrase." > ${serialInterface}
        echo -en "\t\tType a passphrase on serial and press Enter to submit:"      > ${serialInterface}
        cat ${serialInterface} | while read serialPassphrase ; do zfs load-key -a <<< "${serialPassphrase}" 2>&1 > ${serialInterface} ; done &
      done

    else
      echo -e '\t\tNo free serial interfaces found. Skipping hook.'
    fi
  else
    echo -e "\t\tModule not enabled."
  fi
}

function cleanup {
  pkill -HUP cat
}

$1
